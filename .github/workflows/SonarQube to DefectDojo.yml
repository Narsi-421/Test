name: SonarQube to DefectDojo Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  SONAR_PROJECT_KEY: juice-shop
  SONAR_PROJECT_NAME: JuiceShop
  DEFECTDOJO_ENGAGEMENT_ID: 1

jobs:
  sonarqube-analysis:
    runs-on: self-hosted

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Add SonarScanner to PATH
      run: echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH

    - name: SonarQube Analysis
      timeout-minutes: 30
      run: |
        sonar-scanner \
          -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} \
          -Dsonar.projectName=${{ env.SONAR_PROJECT_NAME }} \
          -Dsonar.sources=. \
          -Dsonar.host.url=${{ secrets.SONAR_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

    - name: Download SonarQube Report
      run: |
        curl -u ${{ secrets.SONAR_TOKEN }}: \
          "${{ secrets.SONAR_URL }}/api/issues/search?componentKeys=${{ env.SONAR_PROJECT_KEY }}&resolved=false&ps=500" \
          -o raw-sonarqube-report.json
        echo "Raw report size: $(du -h raw-sonarqube-report.json | cut -f1)"

    - name: Transform Report for DefectDojo
      run: |
        jq '{
          findings: [.issues[] | {
            title: .message,
            severity: (if .severity == "BLOCKER" then "Critical"
                     elif .severity == "CRITICAL" then "High"
                     elif .severity == "MAJOR" then "Medium"
                     elif .severity == "MINOR" then "Low"
                     else "Info" end),
            description: (.component + ": " + .message),
            file_path: .component,
            line: .textRange.startLine,
            vulnerability_ids: [{"vulnerability_id": .rule}]
          }]
        }' raw-sonarqube-report.json > defectdojo-ready.json
        
        echo "Transformed report size: $(du -h defectdojo-ready.json | cut -f1)"
        rm raw-sonarqube-report.json

    - name: Upload to DefectDojo (Retry Logic)
      run: |
        for attempt in {1..3}; do
          echo "Attempt $attempt/3"
          response=$(curl -vvv -s -w "\nHTTP_STATUS:%{http_code}" -X POST \
            "${{ secrets.DEFECTDOJO_URL }}/api/v2/import-scan/" \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_TOKEN }}" \
            -F "scan_type=SonarQube" \
            -F "engagement=${{ env.DEFECTDOJO_ENGAGEMENT_ID }}" \
            -F "file=@defectdojo-ready.json" \
            -F "close_old_findings=true" \
            -F "verified=true")
            
          http_code=$(echo "$response" | grep 'HTTP_STATUS:' | cut -d':' -f2)
          body=$(echo "$response" | sed '/HTTP_STATUS:/d')
          
          echo "Status: $http_code"
          echo "Response: $body"
          
          if [ "$http_code" -eq 201 ]; then
            echo "Upload succeeded"
            exit 0
          fi
          
          sleep $((attempt * 10))
        done
        exit 1

    - name: Clean Workspace (Post-Job)
      if: always()
      run: |
        echo "=== Post-Job Cleanup ==="
        rm -f defectdojo-ready.json sonarqube-report.json
        docker system prune -f
        sudo find /opt/runner/_work -type f -mtime +1 -delete

    - name: Archive Results
      uses: actions/upload-artifact@v4
      with:
        name: scan-results
        path: defectdojo-ready.json
        retention-days: 1
